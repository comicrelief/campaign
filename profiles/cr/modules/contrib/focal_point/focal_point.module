<?php

/**
 * @file
 * Allow users to specify a focal point on content images.
 *
 * @todo add phpUnit tests back in.
 * @todo add support for default foal point value calculation method.
 * @todo add preview/test drive functionality.
 *
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\focal_point\FocalPoint;

/**
 * Implements hook_entity_presave().
 *
 * Saves the focal point value for the image file entity about to be saved.
 */
function focal_point_entity_presave(EntityInterface $entity) {
  // Only worry about entities that are fieldable.
  if ($entity instanceof Drupal\Core\Entity\FieldableEntityInterface) {
    // Loop all the fields and save focal point values for images.
    foreach ($entity->getFieldDefinitions() as $key => $value) {
      if ($value->getType() == 'image' && $entity->{$value->getName()} !== NULL) {
        // Loop through all values for this field. Its cardinality might be > 1.
        foreach ($entity->{$value->getName()} as $item) {
          if (isset($item->focal_point)) {
            $focal_point = new FocalPoint($item->target_id);
            $focal_point->saveFocalPoint($item->focal_point);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function focal_point_field_widget_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  if (get_class($context['widget']) === 'Drupal\image\Plugin\Field\FieldWidget\ImageWidget') {
    $element['#process'][] = array('Drupal\focal_point\Plugin\Field\FieldWidget\FocalPointImageWidget', 'process');
    $element['#value_callback'] = array('Drupal\focal_point\Plugin\Field\FieldWidget\FocalPointImageWidget', 'value');
  }
}
