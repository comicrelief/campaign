<?php

/**
 * @file
 * Allows contributed modules to require external libraries via Composer.
 */

/**
 * Returns whether Composer Manager has been initialized.
 *
 * @param string $root
 *   The app root.
 *
 * @return bool
 *   True if Composer Manager has been initialized, false otherwise.
 */
function composer_manager_initialized($root = NULL) {
  $root = $root ?: \Drupal::root();
  $package = \Drupal\composer_manager\JsonFile::read($root . '/composer.json');

  return isset($package['scripts']['drupal-rebuild']);
}

/**
 * Initializes Composer Manager.
 *
 * This is done by altering the root package to register the module's commands.
 * Executed by init.php because it runs under the current user (and not the web
 * server user like Drupal), giving it a higher chance of success.
 *
 * @param string $root
 *   The app root.
 */
function composer_manager_initialize($root = NULL) {
  $root = $root ?: \Drupal::root();
  $module_path = str_replace($root . '/', '', __DIR__);
  $package = \Drupal\composer_manager\JsonFile::read($root . '/composer.json');
  $package['autoload']['psr-4']['Drupal\\composer_manager\\Composer\\'] = $module_path . '/src/Composer';
  $package['scripts']['drupal-rebuild'] = 'Drupal\\composer_manager\\Composer\\Command::rebuild';
  $package['scripts']['drupal-update'] = 'Drupal\\composer_manager\\Composer\\Command::update';
  \Drupal\composer_manager\JsonFile::write($root . '/composer.json', $package);
}
