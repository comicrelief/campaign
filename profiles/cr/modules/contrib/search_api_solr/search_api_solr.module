<?php

/**
 * @file
 * Provides a Solr-based service class for the Search API.
 */

use Drupal\Core\Form\FormStateInterface;
use \Drupal\Core\Routing\RouteMatchInterface;
use Drupal\search_api\Entity\Server;
use Drupal\search_api\SearchApiException;
use Drupal\search_api\ServerInterface;
use Drupal\search_api_solr\Plugin\search_api\backend\SearchApiSolrBackend;

/**
 * Implements hook_help().
 */
function search_api_solr_help($route_name, RouteMatchInterface $route_match) {
  if ($route_name == 'search_api.overview') {
    // Included because we need the REQUIREMENT_* constants.
    include_once(DRUPAL_ROOT . '/core/includes/install.inc');
    module_load_include('install', 'search_api_solr');
    $reqs = search_api_solr_requirements('runtime');
    foreach ($reqs as $req) {
      if (isset($req['description'])) {
        $type = $req['severity'] == REQUIREMENT_ERROR ? 'error' : ($req['severity'] == REQUIREMENT_WARNING ? 'warning' : 'status');
        drupal_set_message($req['description'], $type);
      }
    }
  }
}

/**
 * Implements hook_cron().
 *
 * Used to execute an optimization operation on all enabled Solr servers once a
 * day.
 */
function search_api_solr_cron() {
  $action = \Drupal::config('search_api_solr.settings')->get('cron_action');
  // We treat all unknown action settings as "none". However, we turn a blind
  // eye for Britons and other people who can spell.
  if (!in_array($action, array('spellcheck', 'optimize', 'optimise'))) {
    return;
  }
  // 86400 seconds is one day. We use slightly less here to allow for some
  // variation in the request time of the cron run, so that the time of day will
  // (more or less) stay the same.
  if (REQUEST_TIME - \Drupal::state()->get('search_api_solr.last_optimize') > 86340) {
    \Drupal::state()->set('search_api_solr.last_optimize', REQUEST_TIME);

    // Get the IDs of all enabled servers which use the Solr backend.
    $ids = \Drupal::entityQuery('search_api_server')
      ->condition('backend', 'search_api_solr')
      ->condition('status', TRUE)
      ->execute();

    $count = 0;
    foreach (Server::loadMultiple($ids) as $server) {
      try {
        /** @var \Solarium\Client $solarium_client */
        $solarium_client = $server->getBackend()->getSolrConnection();
        if ($action != 'spellcheck') {
          $update = $solarium_client->createUpdate();
          $update->addOptimize(TRUE, FALSE);
          $solarium_client->update($update);
        }
        else {
          $solarium_query = $solarium_client->createSelect();
          $solarium_query->setRows(0);

          $spellcheck = $solarium_query->getSpellcheck();
          $spellcheck->setBuild(TRUE);

          $solarium_client->select($solarium_query);
        }
        ++$count;
      }
      catch(SearchApiException $e) {
        watchdog_exception('search_api_solr', $e, '%type while optimizing Solr server @server: !message in %function (line %line of %file).', array('@server' => $server->label()));
      }
    }
    if ($count) {
      $vars['@count'] = $count;
      if ($action != 'spellcheck') {
        \Drupal::logger('search_api_solr')->info('Optimized @count Solr server(s).', $vars);
      }
      else {
        \Drupal::logger('search_api_solr')->info('Rebuilt spellcheck dictionary on @count Solr server(s).', $vars);
      }
    }

    // Delete cached endpoint data once a day.
    \Drupal::state()->delete('search_api_solr.endpoint.data');
  }
}

/**
 * Implements hook_search_api_server_update().
 */
function search_api_solr_search_api_server_update(ServerInterface $server) {
  // @todo Do we still need to keep static and persistent caches?
//  if ($server->getBackendId() == 'search_api_solr') {
//    $server->getSolrConnection()->clearCache();
//  }
}

/**
 * Implements hook_entity_type_alter().
 */
function search_api_solr_entity_type_alter(array &$entity_types) {
  if (\Drupal::moduleHandler()->moduleExists('devel')) {
    /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
    foreach ($entity_types as $entity_type_id => $entity_type) {
      if ($entity_type->hasViewBuilderClass() && $entity_type->hasLinkTemplate('canonical')) {
        $entity_type->setLinkTemplate('devel-solr', "/devel/$entity_type_id/{{$entity_type_id}}/solr");
      }
    }
  }
}
