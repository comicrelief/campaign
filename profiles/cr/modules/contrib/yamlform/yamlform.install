<?php

/**
 * @file
 * Install, update and uninstall functions for the YAML form module.
 */

use Drupal\node\Entity\NodeType;
use Drupal\Component\Serialization\Yaml;

/**
 * Implements hook_install().
 */
function yamlform_install() {
  // Don't override the system.mail.interface.yamlform if the default interface
  // is the 'test_mail_collector'.
  if (\Drupal::configFactory()->get('system.mail')->get('interface.default') == 'test_mail_collector') {
    return;
  }

  // Enable the YAML form mail plugin which allows HTML email to sent.
  // IMPORTANT: Since the Mail System module completely overrides the
  // 'plugin.manager.mail' service the below settings will be completely
  // ignored.
  // @see \Drupal\mailsystem\MailsystemServiceProvider.
  $config = \Drupal::configFactory()->getEditable('system.mail');
  $mail_plugins = $config->get('interface');
  $mail_plugins['yamlform'] = 'yamlform_php_mail';
  $config->set('interface', $mail_plugins)->save();
}

/**
 * Implements hook_uninstall().
 */
function yamlform_uninstall() {
  // Remove the YAML form mail plugin.
  $config = \Drupal::configFactory()->getEditable('system.mail');
  $mail_plugins = $config->get('interface');
  unset($mail_plugins['yamlform']);
  $config->set('interface', $mail_plugins)->save();

  // Delete the YAML form node type.
  if ($node_type = NodeType::load('yamlform')) {
    $node_type->delete();
  }

  // Delete field storage if it is no longer being used by any bundles.
  if ($field_storage = \Drupal::entityManager()->getStorage('field_storage_config')->load('node.yamlform')) {
    if (!$field_storage->getBundles()) {
      $field_storage->delete();
    }
  }
}

/**
 * Implements hook_requirements().
 */
function yamlform_requirements($phase) {
  if ($phase != 'runtime') {
    return [];
  }

  $requirements = [];

  /** @var \Drupal\Core\Asset\LibraryDiscoveryInterface $library_discovery */
  $library_discovery = \Drupal::service('library.discovery');
  $codemirror_library = $library_discovery->getLibraryByName('yamlform', 'codemirror');
  $codemirror_version = $codemirror_library['version'];
  $codemirror_library_exists = (file_exists(DRUPAL_ROOT . '/libraries/codemirror')) ? TRUE : FALSE;

  $t_args = [
    ':href' => "https://cdnjs.com/libraries/codemirror/$codemirror_version",
    '@version' => $codemirror_version,
  ];
  $requirements['yamlform_codemirror'] = [
    'title' => t('YAML form: CodeMirror'),
    'value' => ($codemirror_library_exists) ? t('@version (Installed)', $t_args) : t('@version (<a href=":href">CDN</a>)', $t_args),
    'severity' => REQUIREMENT_OK,
  ];
  return $requirements;
}

/**
 * Add support for HTML and file attachments to YamlFormEmailHandler.
 */
function yamlform_update_8001(&$sandbox) {
  $messages = [];

  // Update 'yamlform.settings' configuration.
  // Copied from \views_update_8001().
  $settings_config = \Drupal::configFactory()->getEditable('yamlform.settings');
  $default_data = Yaml::decode(file_get_contents(drupal_get_path('module', 'yamlform') . '/config/install/yamlform.settings.yml'));

  $settings_config->clear('mail.default_body');
  $settings_config->set('mail.default_body_text', $default_data['mail']['mail.default_body_text']);
  $settings_config->set('mail.default_body_html', $default_data['mail']['mail.default_body_html']);
  $settings_config->save();

  $messages[] = \Drupal::translation()->translate("Update YAML form settings removed 'mail.default_body' and replaced with 'mail_default_body_text' and 'mail_default_body_html'");

  // Update 'yamlform.yamlform.*' configuration.
  // Copied from \views_update_8001().
  $ids = [];

  $config_factory = \Drupal::configFactory();
  foreach ($config_factory->listAll('yamlform.yamlform.') as $yamlform_config_name) {
    $yamlform_config = $config_factory->getEditable($yamlform_config_name);
    $handlers = $yamlform_config->get('handlers');

    $has_email_handler = FALSE;
    foreach ($handlers as $handler_id => $handler) {
      if ($handler['id'] != 'email') {
        continue;
      }
      $has_email_handler = TRUE;

      $base = "handlers.$handler_id";

      // Get debug setting so that we can move it last.
      $debug = $yamlform_config->get($base . '.settings.debug');
      $yamlform_config->clear($base . '.settings.debug');

      $yamlform_config->set($base . '.settings.html', FALSE);
      $yamlform_config->set($base . '.settings.attachments', FALSE);
      $yamlform_config->set($base . '.settings.debug', $debug);
    }

    if ($has_email_handler) {
      $ids[] = $yamlform_config->get('id');
      $yamlform_config->save(TRUE);
    }
  }

  if (!empty($ids)) {
    $messages[] = \Drupal::translation()->translate('Updated email handler for YAML forms: @ids', ['@ids' => implode(', ', array_unique($ids))]);
  }

  return implode("\n", $messages);
}

/**
 * Issue #2701113: Rework YAML form submission view to use templates.
 */
function yamlform_update_8002(&$sandbox) {
  $settings_config = \Drupal::configFactory()->getEditable('yamlform.settings');
  $settings_config->clear('display');
  $settings_config->save();
}

/**
 * Issue #2705859  Allow YAML form elements to define custom display formats. Add emptu formats to yamlform.settings.yml.
 */
function yamlform_update_8003(&$sandbox) {
  /** @var \Drupal\yamlform\YamlFormElementManager $element_manager */
  $element_manager = \Drupal::service('plugin.manager.yamlform.element');
  $element_plugins = $element_manager->getInstances();
  $format = [];
  foreach ($element_plugins as $element_id => $element_plugin) {
    $formats = $element_plugin->getFormats();
    if (empty($formats)) {
      continue;
    }
    if (count($formats) == 1 && isset($formats['value'])) {
      continue;
    }

    $format[$element_id] = '';
  }
  $settings_config = \Drupal::configFactory()->getEditable('yamlform.settings');
  $settings_config->set('format', $format);
  $settings_config->save();
}


/**
 * Issue #2709933: Save export options.
 */
function yamlform_update_8004(&$sandbox) {
  $settings_config = \Drupal::configFactory()->getEditable('yamlform.settings');
  $settings_config->set('export', [
    'delimiter' => ',',
    'header_keys' => 'label',
    'entity_reference_format' => 'link',
    'options_format' => 'compact',
    'options_item_format' => 'label',
  ]);
  $settings_config->save();
}
