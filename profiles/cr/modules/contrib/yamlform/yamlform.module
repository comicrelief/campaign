<?php

/**
 * @file
 * Enables the creation of forms and questionnaires.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\yamlform\Entity\YamlForm;
use Drupal\yamlform\Utility\YamlFormTidy;
use Drupal\yamlform\Utility\YamlFormOptionsHelper;

/**
 * Return status for saving which deleted an existing item.
 */
const YAMLFORM_SAVED_DRAFT = 4;

/**
 * Implements hook_help().
 */
function yamlform_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'entity.yamlform.collection':
      return '<p>' . t('This page provides a list of all YAML forms on the site and allows you to manage the input and settings for each.') . '</p>';

    case 'entity.yamlform_options.collection':
      return '<p>' . t('This page provides a list of all YAML form options to be used within select menus, radio buttons, and checkboxes.') . '</p>';

    case 'entity.yamlform.settings_form':
      return '<p>' . t('Control where and how this form should displayed and how submissions should be processed.') . '</p>';

    case 'entity.yamlform.access_form':
      return '<p>' . t('Control who should be able to create, update, delete, and purge submissions to this form.') . '</p>';

    case 'entity.yamlform.export_form':
      $t_args = [
        ':href_yamlform' => 'https://www.drupal.org/project/issues/yamlform',
        ':href_issue' => 'https://www.drupal.org/issue-queue',
      ];
      return '<p>' . t('The below YAML form configuration file can be deployed to any site.') . '<p>' .
        '<p>' . t('If you run into any issues with this YAML form, you can also attach the below configuration (without any personal information) to a new ticket in the <a href=":href_yamlform">YAML form\'s issue queue</a>.', $t_args) . '</p>' .
        '<p>' . t('Learn more about using <a href=":href_issue">Drupal.org\'s issue queues</a>.', $t_args) . '</p>';

    case 'entity.yamlform_submission.collection':
      return '<p>' . t('This page provides a list of all YAML form submissions on the site.') . '</p>';

    case 'entity.yamlform_submission.resend_form':
      return '<p>' . t('This form may be used to resend message configured for this YAML form. Review the message that needs to be sent and click <em>Resend message</em> to send the message again.') . '</p>';

    case 'yamlform.handler_plugins':
      return '<p>' . t('This page provides a lists all YAML form handler plugins.') . '</p>';

    case 'yamlform.element_plugins':
      return '<p>' . t('This page provides a lists all YAML form element plugins.') . '</p>' .
      '<p>' . t('These plugins are used to alter form elements this includes setting default properties, normalizing data, and/or providing customized display.') . '</p>';

    case 'entity.yamlform.handlers_form':
      return '<p>' . t('This page provides a lists all YAML form handlers associated with this YAML form.') . '</p>' .
        '<p>' . t('Handlers are plugins that act on a YAML form submission.') . '</p>' .
        '<p>' . t('A YAML form submission can be sent via email using an Email handler.') . '</p>';

    case 'entity.yamlform.config_translation_overview':
      return '<p>' . t('Once a YAML form is translated the inputs can no longer be altered on the input property values can be changed.') . '</p>';
  }
}

/**
 * Implements hook_modules_installed().
 */
function yamlform_modules_installed($modules) {
  // Add YAML form paths when the path.module is being installed.
  if (in_array('path', $modules)) {
    /** @var \Drupal\yamlform\YamlFormInterface[] $yamlforms */
    $yamlforms = YamlForm::loadMultiple();
    foreach ($yamlforms as $yamlform) {
      $yamlform->updatePaths();
    }
  }
}

/**
 * Implements hook_modules_uninstalled().
 */
function yamlform_modules_uninstalled($modules) {
  // Remove uninstalled module's third party settings from admin settings.
  $config = \Drupal::configFactory()->getEditable('yamlform.settings');
  $third_party_settings = $config->get('third_party_settings');
  foreach ($modules as $module) {
    unset($third_party_settings[$module]);
  }
  $config->set('third_party_settings', $third_party_settings);
  $config->save();

  // Note, the YAML form (config entity) third party settings are
  // automatically cleaned up when a module is uninstalled because
  // config entities track their dependencies.
}

/**
 * Implements hook_local_tasks_alter().
 */
function yamlform_local_tasks_alter(&$local_tasks) {
  if (isset($local_tasks['config_translation.local_tasks:entity.yamlform.config_translation_overview'])) {
    // Change 'Translate' base route from 'entity.yamlform.edit_form'
    // to 'entity.yamlform.canonical' because by default config entities don't
    // have canonical views but the YAML form entity does.
    $local_tasks['config_translation.local_tasks:entity.yamlform.config_translation_overview']['title'] = 'Translate';
    $local_tasks['config_translation.local_tasks:entity.yamlform.config_translation_overview']['base_route'] = 'entity.yamlform.canonical';
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function yamlform_menu_local_tasks_alter(&$data, $route_name) {
  if (strpos($route_name, 'entity.yamlform.') !== 0) {
    return;
  }

  // Change 'Translate yamlform' tab to be just label 'Translate'.
  if (isset($data['tabs'][0]['config_translation.local_tasks:entity.yamlform.config_translation_overview']['#link']['title'])) {
    $data['tabs'][0]['config_translation.local_tasks:entity.yamlform.config_translation_overview']['#link']['title'] = t('Translate');
  }
}

/**
 * Implements hook_form_alter().
 */
function yamlform_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (!empty($form['#yamlform'])) {
    $form['#after_build'][] = '_yamlform_form_after_build';
  }
}

/**
 * Alter YAML form.
 */
function _yamlform_form_after_build($form, FormStateInterface $form_state) {
  // Add contextual links and change theme wrapper to yamlform.html.twig
  // which includes 'title_prefix' and 'title_suffix' variables needed for
  // contextual links to appear.
  $form['#contextual_links']['yamlform'] = [
    'route_parameters' => ['yamlform' => $form['#yamlform']],
  ];
  $form['#theme_wrappers'] = ['yamlform'];
  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function yamlform_form_config_translation_add_form_alter(&$form, FormStateInterface $form_state, $is_new = TRUE) {
  // Manually apply YAML editor to text field that store YAML data.
  foreach ($form['config_names'] as $config_name => &$config_element) {
    if ($config_name == 'yamlform.settings') {
      _yamlform_form_config_translate_add_form_alter_yaml_element($config_element['test']['types'], 'yamlform.settings', 'test.types');
      _yamlform_form_config_translate_add_form_alter_yaml_element($config_element['test']['names'], 'yamlform.settings', 'test.names');
    }
    elseif (strpos($config_name, 'yamlform.yamlform_options.') === 0) {
      _yamlform_form_config_translate_add_form_alter_yaml_element($config_element['options'], $config_name, 'options');
    }
    elseif (strpos($config_name, 'yamlform.yamlform.') === 0) {
      $form_state->set('config_name', $config_name);
      $form_state->set('yamlform_id', str_replace('yamlform.yamlform.', '', $config_name));
      _yamlform_form_config_translate_add_form_alter_yaml_element($config_element['inputs'], $config_name, 'inputs');
      $form['#validate'][] = 'yamlform_form_config_translation_add_form_validate';
    }
  }
}

/**
 * Validate callback for YAML form config translation form.
 */
function yamlform_form_config_translation_add_form_validate(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\yamlform\YamlFormEntityInputsValidator $inputs_validator */
  $inputs_validator = \Drupal::service('yamlform.inputs_validator');

  $values = $form_state->getValues();
  $config_name = $form_state->get('config_name');
  $yamlform_id = $form_state->get('yamlform_id');

  $yamlform = YamlForm::load($yamlform_id);
  $yamlform->set('inputs', $values['translation']['config_names'][$config_name]['inputs']);
  if ($messages = $inputs_validator->validate($yamlform)) {
    foreach ($messages as $message) {
      $form_state->setErrorByName('inputs', $message);
    }
  }
}

/**
 * Alter translated config entity property.
 *
 * @param array $element
 *   A form element containing 'source' and 'translation'.
 * @param string $name
 *   The config file name.
 * @param string $key
 *   THe config file key.
 */
function _yamlform_form_config_translate_add_form_alter_yaml_element(array &$element, $name, $key) {
  $element['source']['value'] = [
    '#theme' => 'yamlform_codemirror',
    '#code' => YamlFormTidy::tidy(\Drupal::config($name)->get($key)),
    '#type' => 'yaml',
  ];
  unset($element['source']['#markup']);
  $element['translation']['#type'] = 'yamlform_codemirror_yaml';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function yamlform_form_config_translation_edit_form_alter(&$form, FormStateInterface $form_state) {
  yamlform_form_config_translation_add_form_alter($form, $form_state, FALSE);
}

/**
 * Implements hook_library_info_alter().
 */
function yamlform_library_info_alter(&$libraries, $extension) {
  // Only alter YAML form libraries.
  if ($extension != 'yamlform') {
    return;
  }

  // Map /library/* paths to CDN.
  // @see yamlform.libraries.yml
  foreach ($libraries as $name => &$library) {
    // Check CDN setting exists.
    if (!isset($library['cdn'])) {
      continue;
    }

    // Check if the CDN's source /library/* path exists.
    reset($library['cdn']);
    if (file_exists(DRUPAL_ROOT . key($library['cdn']))) {
      continue;
    }

    _yamlform_library_info_alter_recursive($library, $library['cdn']);
  }
}

/**
 * Recursive through a YAML form library.
 *
 * @param array $library
 *   A YAML form library defined in yamlform.libraries.yml.
 * @param array $cdn
 *   A associative array of library paths mapped to CDN URL.
 */
function _yamlform_library_info_alter_recursive(array &$library, array $cdn) {
  foreach ($library as $key => &$value) {
    // CSS and JS files and listed in associative arrays keyed via string.
    if (!is_string($key) || !is_array($value)) {
      continue;
    }

    // Ignore the CDN's associative array.
    if ($key == 'cdn') {
      continue;
    }

    // Replace the CDN sources (ie /library/*) with the CDN URL destination
    // (https://cdnjs.cloudflare.com/ajax/libs/*).
    foreach ($cdn as $source => $destination) {
      if (strpos($key, $source) === 0) {
        $uri = str_replace($source, $destination, $key);
        $library[$uri] = $value;
        unset($library[$key]);
        break;
      }
    }

    // Recurse downward to find nested libraries.
    _yamlform_library_info_alter_recursive($value, $cdn);
  }
}

/**
 * Implements hook_page_attachments().
 */
function yamlform_page_attachments(array &$attachments) {
  // Attach codemirror library to block admin to ensure that the library
  // is loaded by the YAML form block is placed using AJAX.
  if (\Drupal::routeMatch()->getRouteName() == 'block.admin_display') {
    $attachments['#attached']['library'][] = 'yamlform/yamlform.codemirror.yaml';
  }
}

/**
 * Implements hook_yamlform_options_YAMLFORM_OPTIONS_ID_alter().
 *
 * @see config/install/yamlform.yamlform.example_options.yml
 */
function yamlform_yamlform_options_range_alter(array &$options, array $element) {
  $element += [
    '#min' => 1,
    '#max' => 100,
    '#step' => 1,
    '#pad_length' => NULL,
    '#pad_str' => 0,
  ];

  $options = YamlFormOptionsHelper::range(
    $element['#min'],
    $element['#max'],
    $element['#step'],
    $element['#pad_length'],
    $element['#pad_str']
  );
}

/**
 * Implements hook_mail().
 */
function yamlform_mail($key, &$message, $params) {
  // Never send emails when using devel generate to create 1000's of
  // submissions.
  if (\Drupal::moduleHandler()->moduleExists('devel_generate')
    && \Drupal\yamlform\Plugin\DevelGenerate\YamlFormSubmissionDevelGenerate::isGeneratingSubmissions()) {
    $message['send'] = FALSE;
  }

  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];

  // Set the header's 'From' to the 'from_mail' so that the YAML form email from
  // value is used instead of site's email address.
  // See: \Drupal\Core\Mail\MailManager::mail.
  if ($params['from_mail']) {
    $message['headers']['From'] = $params['from_mail'];
    $message['headers']['Reply-to'] = $params['from_mail'];
    $message['headers']['Return-Path'] = $params['from_mail'];
  }
}

/**
 * Implements hook_mail_alter().
 */
function yamlform_mail_alter(&$message) {
  // Drupal hardcodes all mail header as 'text/plain' so we need to set the
  // header's 'Content-type' to HTML if the EmailYamlFormHandler's
  // 'html' flag has been set.
  // @see \Drupal\Core\Mail\MailManager::mail()
  // @see \Drupal\yamlform\Plugin\YamlFormHandler\EmailYamlFormHandler::getMessage().
  if (strpos($message['id'], 'yamlform') === 0) {
    if ($message['params']['html']) {
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
    }
  }
}

/**
 * Implements hook_theme().
 */
function yamlform_theme() {
  $info = [
    'yamlform' => [
      'render element' => 'element',
    ],
    'yamlform_handler_email_summary' => [
      'variables' => ['settings' => NULL, 'handler' => []],
    ],

    'yamlform_submission_navigation' => [
      'variables' => ['yamlform_submission' => NULL, 'rel' => 'canonical'],
    ],
    'yamlform_submission_information' => [
      'variables' => ['yamlform_submission' => NULL, 'open' => TRUE],
    ],

    'yamlform_submission_html' => [
      'variables' => ['yamlform_submission' => NULL],
    ],
    'yamlform_submission_text' => [
      'variables' => ['yamlform_submission' => NULL],
    ],
    'yamlform_submission_yaml' => [
      'variables' => ['yamlform_submission' => NULL],
    ],

    'yamlform_element_base_html' => [
      'variables' => ['element' => [], 'value' => NULL, 'options' => []],
    ],
    'yamlform_element_base_text' => [
      'variables' => ['element' => [], 'value' => NULL, 'options' => []],
    ],

    'yamlform_container_base_html' => [
      'variables' => ['element' => [], 'value' => NULL, 'options' => []],
    ],
    'yamlform_container_base_text' => [
      'variables' => ['element' => [], 'value' => NULL, 'options' => []],
    ],

    'yamlform_element_color_value_swatch' => [
      'variables' => ['element' => NULL, 'value' => NULL, 'options' => []],
    ],

    'yamlform_codemirror' => [
      'variables' => ['code' => NULL, 'type' => 'text'],
    ],
  ];

  // Since any rendering of a YAML form is going to require 'yamlform.theme.inc'
  // we are going to just add it to every template.
  foreach ($info as &$template) {
    $template['file'] = 'yamlform.theme.inc';
  }

  return $info;
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function yamlform_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if (strpos($hook, 'yamlform_') !== 0) {
    return;
  }

  if (strpos($hook, 'yamlform_element_base_') === 0 || strpos($hook, 'yamlform_container_base_') === 0) {
    $element = $variables['element'];
    $type = $element['#type'];
    $name = $element['#key'];

    $suggestions[] = $hook . '__' . $type;
    $suggestions[] = $hook . '__' . $type . '__' . $name;
  }
  elseif (strpos($hook, 'yamlform_submission_') === 0) {
    /** @var \Drupal\yamlform\YamlFormSubmissionInterface $yamlform_submission */
    $yamlform_submission = $variables['yamlform_submission'];
    $yamlform = $yamlform_submission->getYamlForm();
    $suggestions[] = $hook . '__' . $yamlform->id();
  }
}

/**
 * Provides custom PHP error handling when form rendering is validated.
 *
 * Converts E_RECOVERABLE_ERROR to WARNING so that an exceptions can be thrown
 * and caught by
 * \Drupal\yamlform\YamlFormEntityInputsValidator::validateRendering().
 *
 * @param int $error_level
 *   The level of the error raised.
 * @param string $message
 *   The error message.
 * @param string $filename
 *   The filename that the error was raised in.
 * @param int $line
 *   The line number the error was raised at.
 * @param array $context
 *   An array that points to the active symbol table at the point the error
 *   occurred.
 *
 * @throws \ErrorException
 *   Throw ErrorException for E_RECOVERABLE_ERROR errors.
 *
 * @see \Drupal\yamlform\YamlFormEntityInputsValidator::validateRendering()
 */
function _yamlform_entity_input_validate_rendering_error_handler($error_level, $message, $filename, $line, $context) {
  // From: http://stackoverflow.com/questions/15461611/php-try-catch-not-catching-all-exceptions
  if (E_RECOVERABLE_ERROR === $error_level) {
    // Allow Drupal to still log the error but convert it to a warning.
    _drupal_error_handler(E_WARNING, $message, $filename, $line, $context);
    throw new ErrorException($message, $error_level, 0, $filename, $line);
  }
  else {
    _drupal_error_handler($message, $message, $filename, $line, $context);
  }
}
