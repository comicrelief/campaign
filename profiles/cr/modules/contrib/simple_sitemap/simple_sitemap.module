<?php
/**
 * @file
 * Main module file containing hooks.
 */

use Drupal\simple_sitemap\Form;

/**
 * Implements hook_help.
 */
function simple_sitemap_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
  return $route_name === 'help.page.simple_sitemap' ?
    check_markup(file_get_contents(dirname(__FILE__) . "/README.txt")) : NULL;
}

/**
 * Implements hook_form_alter.
 *
 * Adds sitemap settings to entity types that are supported via plugins.
 */
function simple_sitemap_form_alter(&$form, $form_state, $form_id) {
  $f = new Form($form_state);
  if ($f->alteringForm) {
    $form['simple_sitemap'] = [
      '#type' => 'details',
      '#group' => isset($form['additional_settings']) ? 'additional_settings' : 'advanced',
      '#title' => t('Simple XML sitemap'),
      '#description' => $f->entityCategory == 'instance' ? t('Settings for this specific entity can be overridden here.') : '',
    ];
    // Attach some js magic to forms.
    if ($f->entityTypeId != 'comment' || $f->entityCategory != 'instance') // todo: JS not working on comment entity form, hence disabling.
      $form['#attached']['library'][] = 'simple_sitemap/form';
    // Only attach fieldset summary js to 'additional settings' vertical tabs.
    if (isset($form['additional_settings'])) {
      $form['#attached']['library'][] = 'simple_sitemap/fieldsetSummaries';
    }

    $f->displayEntitySitemapSettings($form['simple_sitemap']);
    $f->displaySitemapRegenerationSetting($form['simple_sitemap']);
  }
  else {
    return;
  }
  $form['#simple_sitemap'] = $f;

  // Add submission handler.
  if (isset($form['actions']['submit']['#submit'])) {
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'simple_sitemap_entity_form_submit';
      }
    }
  }
  else { // Fix for account page rendering other submit handlers not usable.
    $form['#submit'][] = 'simple_sitemap_entity_form_submit';
  }
}

/**
 * Form submission handler called in hook_form_alter.
 */
function simple_sitemap_entity_form_submit($form, &$form_state) {

  // Only make changes in DB if sitemap settings actually changed.
  if (Form::valuesChanged($form, $form_state)) {

    $sitemap = \Drupal::service('simple_sitemap.generator');
    $f = $form['#simple_sitemap'];
    $values = $form_state->getValues();
    // Fix for values appearing in a sub array on a commerce product entity.
    if (isset($values['simple_sitemap'])) {
      $values = $values['simple_sitemap'];
    }

    // Get current entity type sitemap settings.
    $entity_types = $sitemap->getConfig('entity_types');

    switch ($f->entityCategory) {

      case 'custom':
      case 'bundle':
        $f->bundleName = !empty($f->bundleName) ? $f->bundleName : Form::getNewEntityId($form_state);
        $entity_types[$f->entityTypeId][$f->bundleName]['index'] = $values['simple_sitemap_index_content'];
        $entity_types[$f->entityTypeId][$f->bundleName]['priority'] = $values['simple_sitemap_priority'];
        break;

      case 'instance':
        $f->instanceId = !empty($f->instanceId) ? $f->instanceId : Form::getNewEntityId($form_state);

        // Delete overrides if they are identical to bundle settings.
        if ($values['simple_sitemap_index_content'] == $entity_types[$f->entityTypeId][$f->bundleName]['index']
          && $values['simple_sitemap_priority'] == $entity_types[$f->entityTypeId][$f->bundleName]['priority']) {
          unset($entity_types[$f->entityTypeId][$f->bundleName]['entities'][$f->instanceId]);
        }
        else { // Else save overrides for this entity.
          $entity_types[$f->entityTypeId][$f->bundleName]['entities'][$f->instanceId]['index'] = $values['simple_sitemap_index_content'];
          $entity_types[$f->entityTypeId][$f->bundleName]['entities'][$f->instanceId]['priority'] = $values['simple_sitemap_priority'];
        }
        break;
    }

    // Save new entity type settings.
    $sitemap->saveConfig('entity_types', $entity_types);

    // Regenerate sitemaps according to user setting.
    if ($values['simple_sitemap_regenerate_now']) {
      $sitemap->generateSitemap();
    }
  }
}

/**
 * Implements hook_cron.
 */
function simple_sitemap_cron() {
  $sitemap = \Drupal::service('simple_sitemap.generator');
  if ($sitemap->getSetting('cron_generate')) {
    $sitemap->generateSitemap('backend');
  }
}

/**
 * Implements hook_entity_bundle_delete().
 *
 * Removes settings of the removed bundle.
 *
 * @todo Not working for menu bundles, as they are technically not bundles. Implement hook_menu_delete().
 */
function simple_sitemap_entity_bundle_delete($entity_type_id, $bundle) {
  $sitemap = \Drupal::service('simple_sitemap.generator');
  $entity_types = $sitemap->getConfig('entity_types');
  if (isset($entity_types[$entity_type_id][$bundle])) {
    unset($entity_types[$entity_type_id][$bundle]);
    $sitemap->saveConfig('entity_types', $entity_types);
    $message = t("You may want to <a href='@url'>regenerate</a> your XML sitemap now.", array('@url' => $GLOBALS['base_url'] . '/admin/config/search/simplesitemap'));
    if ($sitemap->getSetting('cron_generate')) {
      $message .= '</br>' . t('Otherwise the sitemap will be regenerated on the next cron run.');
    }
//    drupal_set_message($message); // todo: Commented out, as html code is visible.
  }
}

/**
 * Implements hook_entity_delete().
 *
 * Removes settings of the removed entity.
 */
function simple_sitemap_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {
  $sitemap = \Drupal::service('simple_sitemap.generator');
  $entity_types = $sitemap->getConfig('entity_types');
  $entity_type_id = $entity->getEntityTypeId();
  $bundle_name = !empty($entity->bundle()) ? $entity->bundle() : $entity_type_id;
  $bundle_name = $bundle_name == 'menu_link_content'&& method_exists($entity, 'getMenuName') ? $entity->getMenuName() : $bundle_name; // Menu fix.
  if (isset($entity_types[$entity_type_id][$bundle_name]['entities'][$entity->id()])) {
    unset($entity_types[$entity_type_id][$bundle_name]['entities'][$entity->id()]);
    $sitemap->saveConfig('entity_types', $entity_types);
  }
}
