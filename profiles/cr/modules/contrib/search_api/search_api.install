<?php

/**
 * @file
 * Install, update and uninstall functions for the Search API module.
 */

use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Link;
use Drupal\search_api\Entity\Server;
use Drupal\Core\Url;

/**
 * Implements hook_schema().
 */
function search_api_schema() {
  $schema['search_api_item'] = array(
    'description' => 'Stores the items which should be indexed for each index, and their state.',
    'fields' => array(
      'index_id' => array(
        'description' => 'The ID of the index this item belongs to',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'datasource' => array(
        'description' => 'The plugin ID of the datasource this item belongs to',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'item_id' => array(
        'description' => 'The unique identifier of this item',
        'type' => 'varchar',
        'length' => 150,
        'not null' => TRUE,
      ),
      'changed' => array(
        'description' => 'A timestamp indicating when the item was last changed',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'status' => array(
        'description' => 'Boolean indicating whether the item needs to be reindexed',
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'indexing' => array('index_id', 'status', 'changed', 'item_id'),
    ),
    'primary key' => array('index_id', 'item_id'),
  );

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function search_api_requirements($phase) {
  if ($phase == 'runtime') {
    $requirements = array();
    $message = _search_api_search_module_warning();
    if ($message) {
      $requirements += array(
        'search_api_core_search' => array(
          'title' => t('Search API'),
          'value' => $message,
          'severity' => REQUIREMENT_WARNING,
        ),
      );
    }

    /** @var \Drupal\search_api\ServerInterface[] $servers */
    $servers = Server::loadMultiple();
    $unavailable_servers = array();
    foreach ($servers as $server) {
      if ($server->status() && !$server->isAvailable()) {
        $unavailable_servers[] = $server->label();
      }
    }
    if (!empty($unavailable_servers)) {
      $requirements += array(
        'search_api_server_unavailable' => array(
          'title' => t('Search API'),
          'value' => \Drupal::translation()->formatPlural(
            count($unavailable_servers),
            'The search server "@servers" is currently not available',
            'The following search servers are not available: @servers',
            array('@servers' => implode(', ', $unavailable_servers))
          ),
          'severity' => REQUIREMENT_ERROR
        )
      );
    }

    $pending_tasks = \Drupal::getContainer()
      ->get('search_api.task_manager')
      ->getTasksCount();
    if ($pending_tasks) {
      $args['@link'] = '';
      $url = Url::fromRoute('search_api.execute_tasks');
      if ($url->access()) {
        $link = new Link(t('Execute now'), $url);
        $link = $link->toString();
        $args['@link'] = $link;
        $args['@link'] = new FormattableMarkup(' (@link)', $args);
      }

      $requirements['search_api_pending_tasks'] = array(
        'title' => t('Search API'),
        'value' => \Drupal::translation()->formatPlural(
          $pending_tasks,
          'There is @count pending Search API task. @link',
          'There are @count pending Search API tasks. @link',
          $args
        ),
        'severity' => REQUIREMENT_WARNING,
      );
    }

    return $requirements;
  }
  return array();
}
