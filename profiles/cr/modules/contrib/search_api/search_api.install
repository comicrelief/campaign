<?php

/**
 * @file
 * Install, update and uninstall functions for the Search API module.
 */

use Drupal\search_api\Entity\Server;
use Drupal\Core\Url;

/**
 * Implements hook_schema().
 */
function search_api_schema() {
  $schema['search_api_item'] = array(
    'description' => 'Stores the items which should be indexed for each index, and their state.',
    'fields' => array(
      'index_id' => array(
        'description' => 'The ID of the index this item belongs to',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'datasource' => array(
        'description' => 'The plugin ID of the datasource this item belongs to',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'item_id' => array(
        'description' => 'The unique identifier of this item',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'changed' => array(
        'description' => 'A timestamp indicating when the item was last changed',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'status' => array(
        'description' => 'Boolean indicating whether the item needs to be reindexed',
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'indexing' => array('index_id', 'status', 'changed', 'item_id'),
    ),
    'primary key' => array('index_id', 'item_id'),
  );
  $schema['search_api_task'] = array(
    'description' => 'Stores pending tasks for servers.',
    'fields' => array(
      'id' => array(
        'description' => 'An integer identifying this task',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'server_id' => array(
        'description' => 'The ID of the server for which this task should be executed',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'A keyword identifying the type of task that should be executed',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'index_id' => array(
        'description' => 'The ID of the index to which this task pertains, if applicable for this type',
        'type' => 'varchar',
        'length' => 50,
        'not null' => FALSE,
      ),
      'data' => array(
        'description' => 'Some data needed for the task, might be optional depending on the type',
        'type' => 'text',
        'size' => 'medium',
        'serialize' => TRUE,
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'execution' => array('type', 'server_id', 'id'),
    ),
    'primary key' => array('id'),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function search_api_install() {
  $message = _search_api_search_module_warning();
  if ($message) {
    drupal_set_message($message, 'warning');
  }
}

/**
 * Implements hook_requirements().
 */
function search_api_requirements($phase) {
  if ($phase == 'runtime') {
    $requirements = array();
    $message = _search_api_search_module_warning();
    if ($message) {
      $requirements += array(
        'search_api_core_search' => array(
          'title' => t('Search API'),
          'value' => $message,
          'severity' => REQUIREMENT_WARNING,
        ),
      );
    }

    $servers = Server::loadMultiple();
    $unavailable_servers = array();
    foreach ($servers as $server) {
      if ($server->status() && !$server->isAvailable()) {
        $unavailable_servers[] = $server->label();
      }
    }
    if (!empty($unavailable_servers)) {
      $requirements += array(
        'search_api_server_unavailable' => array(
          'title' => t('Search API'),
          'value' => \Drupal::translation()->formatPlural(
            count($unavailable_servers),
            'The search server "@servers" is currently not available',
            'The following search servers are not available: @servers',
            array('@servers' => implode(', ', $unavailable_servers))
          ),
          'severity' => REQUIREMENT_ERROR
        )
      );
    }

    return $requirements;
  }
  return array();
}

/**
 * Returns a warning message if the Core Search module is enabled.
 *
 * @return string|null
 *   A warning message if needed, NULL otherwise.
 *
 * @see search_api_install()
 * @see search_api_requirements()
 */
function _search_api_search_module_warning() {
  if (Drupal::moduleHandler()->moduleExists('search')) {
    return t('The default Drupal Search module is still enabled. If you are using Search API, you probably want to <a href=":url">uninstall</a> the Search module for performance reasons.', array(':url' => Url::fromRoute('system.modules_uninstall')->toString()));
  }
  return NULL;
}
