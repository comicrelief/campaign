<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_permission().
 */
function cr_transactional_emails_permission() {
  return array(
    'administer crazy egg' => array(
      'title' => t('Administer Transactional Emails'),
      'description' => t('Administer Email Delivery Service API Connections.'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function cr_transactional_emails_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.cr_transactional_emails':
      return t('<strong>Transactional Emails</strong> is a tool which integrates the website to an email delivery service (e.g. SmartFocus), to broadcast emails.');
  }
}

/**
 * Implements cr_transactional_emails_send().
 * @param string $to - email address to send email to
 * @param array $template - template details
 * @param array $params - params to pass on to email delivery service and drop placeholder data into email templates
 * Returns boolean status true or false on delivery to email delivery service
 */
function cr_transactional_emails_send($send_to, $template = array(), $params = array()) {
  // NOTES:
  // The following code is specific to SmartFocus and so can be moved to a plugin class.
  // cr_transactional_emails_send() can then be refactored to use as a mapper function to call the selected plugin and class method

  // Check email address; log error if email address is invalid
  if (!(\Drupal::service('email.validator')->isValid($send_to))) {
    \Drupal::logger('cr_transactional_emails')->error('cr_transactional_emails_send(): Invalid send email address supplied.');
    return false;
  }
  // Check SmartFocus template keys; log error if keys not supplied
  if (empty($template['template_unique_api_key'])) {
    \Drupal::logger('cr_transactional_emails')->error('cr_transactional_emails_send(): No template unique key provided');
    return false;
  }
  if (empty($template['template_security_api_key'])) {
    \Drupal::logger('cr_transactional_emails')->error('cr_transactional_emails_send(): No template security key provided');
    return false;
  }
  // Flatten $params to delimited separated string for SmartFocus
  $params_string = array();
  $smartfocus_parameter_headers = array('transource', 'first_name', 'last_name', 'email', 'category', 'subject', 'message');
  foreach ($params as $k => $v) {
    if ( in_array( trim($k), $smartfocus_parameter_headers ) ) {
      $params_string[]= trim($k).':'.trim($v);
    }
  }
  $params_string = implode('|',$params_string);

  // Build query array to send to SmartFocus with specific instructions and parameters
  $query = array(
    'random' => $template['template_unique_api_key'],
    'encrypt' => $template['template_security_api_key'],
    'email' => $send_to,
    'senddate' => '2014-01-01 00:00:00', // Past dates always send immediately
    'uidkey' => 'EMAIL',
    'stype' => 'NOTHING',
    'dyn' => $params_string,
  );

  // Build api url conneciton string and attach parameters
  $config = \Drupal::config('cr_transactional_emails.settings');
  $endpoint = $config->get('smartfocus_api_endpoint');
  $url = Url::fromUri($endpoint, array('query' => $query))->toString();

  // Trigger action to SmartFocus; log issues encountered
  try {
    $response = \Drupal::httpClient()->get($url);
    $status_code = $response->getStatusCode();
    $body_data = $response->getBody();
    if ($status_code != '200') {
      \Drupal::logger('cr_transactional_emails')->error('cr_transactional_emails_send(): SmartFocus API call error: !error.', array('!error' => $body_data));
      return false;
    }
  } catch (RequestException $e) {
    \Drupal::logger('cr_transactional_emails')->error('cr_transactional_emails_send(): SmartFocus API call exception: !error.', array('!error' => $e->getMessage()));
    return false;
  }

  return true;
}

/**
 * Implements cr_transactional_emails_get_fieldset().
 * @return array of form elements
 */
function cr_transactional_emails_get_template_fieldset() {
  // NOTES:
  // The following code is specific to SmartFocus and so can be moved to a plugin class.
  // cr_transactional_emails_get_template_fieldset() can then be refactored to use as a mapper function to call the selected plugin and class method

  // Build and return fieldset
  $fieldset = array();

  $fieldset['transactional_emails_template'] = array(
    '#type' => 'fieldset',
    '#title' => 'Email Template',
  );

  $fieldset['transactional_emails_template']['template_unique_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Unique key'),
    '#maxlength' => 60,
  );

  $fieldset['transactional_emails_template']['template_security_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Security key'),
    '#maxlength' => 60,
  );

  return $fieldset;
}