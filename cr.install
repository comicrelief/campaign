<?php
/**
 * @file
 * Install, update and uninstall functions for the Comic Relief installation profile.
 */

use Drupal\Core\Database\Database;


function deleteConfig($file) {
  \Drupal::configFactory()->getEditable($file)->delete();
}

function installer() {
  return \Drupal::service('module_installer');
}
/**
 * Implements hook_install().
 */
function cr_install() {
  // Disable the user pictures on nodes.
  \Drupal::configFactory()
    ->getEditable('system.theme.global')
    ->set('features.node_user_picture', false)
    ->save(true);
}

/**
 * Install config_readonly
 */
function cr_update_8001() {
  installer()->install(['config_readonly']);
}

/**
 * Install cr_cards and cr_single_msg
 */
function cr_update_8002() {
  installer()->install(['cr_cards', 'cr_single_msg']);
}

/**
 * Install cr_downloadables
 */
function cr_update_8003() {
  installer()->install(['cr_downloadables']);
}

/**
 * Install cr_navigation
 */
function cr_update_8004() {
  installer()->install(['cr_navigation']);
}

/**
 * Remove field_youtube_url and uninstall youtube module
 */
function cr_update_8005() {
  $field = Drupal\field\Entity\FieldStorageConfig::loadByName('node', 'field_youtube_url');
  $field->delete();
  field_purge_batch('field_youtube_url');
  installer()->uninstall(['youtube']);
}

/**
 * Install cr_user
 */
function cr_update_8006() {
  installer()->install(['cr_user']);
}

/**
 * Delete old config
 */
function cr_update_8007() {
  deleteConfig('system.menu.main-navigation');
}

/**
 * Kill crop & delete old fields.
 */
function cr_update_8008() {
  $query = "DELETE FROM key_value WHERE collection='system.schema' AND name='crop'";
  Database::getConnection()->query($query);

  deleteConfig('field.storage.block_content.field_teaser_link');
  deleteConfig('field.field.block_content.teaser.field_teaser_link');
}

/**
* Install cdn
*/
function cr_update_8009() {
 installer()->install(['cdn']);
}

/**
* Remove field_article_tags
*/
function cr_update_8010() {
  $field = Drupal\field\Entity\FieldStorageConfig::loadByName('node', 'field_article_tags');
  $field->delete();
  field_purge_batch('field_article_tags');
}

/**
 * Remove field_partner_image
 */
function cr_update_8011() {
  $field = Drupal\field\Entity\FieldStorageConfig::loadByName('node', 'field_partner_image');
  $field->delete();
  field_purge_batch('field_partner_image');
}

/**
 * Remove Search view + search configs
 */
function cr_update_8012() {
  $entityTypeManager = \Drupal::service('entity_type.manager');
  $view = $entityTypeManager->getStorage('view')->load('search');
  $view->delete();
  deleteConfig('views.view.search');
  deleteConfig('search_api.server.database');

  $query = 'ALTER TABLE {search_api_task}
CHANGE COLUMN server_id server_id VARCHAR(50) NULL';
  Database::getConnection()->query($query);
}

/**
 * Install cr_social
 */
function cr_update_8013() {
  installer()->install(['cr_social']);
}

/**
 * Install cr_story
 */
function cr_update_8015() {
  installer()->install(['cr_story']);
}

/**
 * Install cr_iframe
 */
function cr_update_8016() {
  installer()->install(['cr_iframe']);
}

/**
* Install cr_video cr_media
*/
function cr_update_8017() {
  installer()->install(['cr_video']);
  installer()->install(['cr_media']);
}

/**
* Install cr_content_reference
*/
function cr_update_8018() {
  installer()->install(['cr_content_reference']);
}

/**
* Install cr_quote
*/
function cr_update_8019() {
  installer()->install(['cr_quote']);
}

/**
* Remove title field from teaser block
*/
function cr_update_8020() {
  deleteConfig('field.storage.block_content.field_teaser_title');
  deleteConfig('field.field.block_content.teaser.field_teaser_title');
  field_purge_batch('field_teaser_title');
}

/**
* Install twig_tweak
*/
function cr_update_8021() {
  installer()->install(['twig_tweak', 'field_group']);
}

/**
* Remove cr_single_message_row
*/
function cr_update_8022() {
  // Remove any orphaned paragraphs
  $result = \Drupal::entityQuery('paragraph')
    ->condition('type', 'cr_single_message_row')
    ->execute();
   entity_delete_multiple('paragraph', $result);
  // Disable the containing module
  installer()->uninstall(['cr_single_message_row_paragraph']);
}

/**
 * Delete old schedule config
 */
function cr_update_8023() {
  deleteConfig('scheduled_updates.scheduled_update_type.node__status');
}

/**
 * Delete old varnish config
 */
function cr_update_8024() {
  deleteConfig('purge_purger_http.settings.0e73130559');
  deleteConfig('purge_purger_http.settings.52aab9005f');
}

/**
 * Deletes config in landing pages & news block
 */
function cr_update_8025() {
  deleteConfig('core.entity_view_display.node.landing.landing_page_header');
  deleteConfig('core.entity_view_mode.node.landing_page_header');
  deleteConfig('block.block.views_block__what_s_going_on_block_1');
}

/**
 * Remove update module
 */
function cr_update_8026() {
  installer()->uninstall(['update']);
  deleteConfig('update.settings');
}

/**
* Install cr_meta_icons
*/
function cr_update_8027() {
  installer()->install(['cr_meta_icons']);
}

/**
 * Delete cr_search_db config
 */
function cr_update_8028() {
  deleteConfig('search_api.server.cr_database');
  deleteConfig('search_api.index.cr_content');
  deleteConfig('views.view.search_db');
  deleteConfig('search_api_db.settings');
  installer()->uninstall(['search_api_db']);
}

/**
 * Install blazy and remove dblog settings
 */
function cr_update_8029() {
  installer()->install(['blazy']);
  installer()->uninstall(['update']);
  deleteConfig('dblog.settings');
}

/**
 * Install better_exposed_filters & cr_image
 */
function cr_update_8030() {
  installer()->install(['better_exposed_filters'], ['cr_image']);
}

/**
 * Install crop
 */
function cr_update_8031() {
  installer()->install(['crop']);
}

/**
 * Install cr_colours
 */
function cr_update_8032() {
  installer()->install(['cr_colours']);
}

/**
 * Install cr_feature_articles
 */
function cr_update_8033() {
  installer()->install(['cr_feature_articles']);
}

/**
 * Re-save all Article content to add new exclude from aggregator field.
 */
function cr_update_8034() {

  // Reinstall the cr_article configuration.
  \Drupal::service('config.installer')->installDefaultConfig('module', 'cr_article');

  // Get an array of all 'article' node ids.
  $article_nids = \Drupal::entityQuery('node')
    ->condition('type', 'article')
    ->execute();

  // Load all the articles.
  $articles = \Drupal\node\Entity\Node::loadMultiple($article_nids);
  foreach ($articles as $article) {
    $article->set('field_article_exclude_aggr', 0);
    $article->save();
  }
}

/**
 * Install views_ajax_history.
 */
function cr_update_8035() {
  installer()->install(['views_ajax_history']);
}

/**
 * Rerun article save due to previously incorrectly named field in hook 8034.
 */
function cr_update_8036() {
  // Get an array of all 'article' node ids.
  $article_nids = \Drupal::entityQuery('node')
    ->condition('type', 'article')
    ->execute();

  // Load all the articles.
  $articles = \Drupal\node\Entity\Node::loadMultiple($article_nids);
  foreach ($articles as $article) {
    $article->set('field_article_exclude_aggr', 0);
    $article->save();
  }
}

/**
 * Re-install the feature articles module configuration to allow null taxonomies.
 */
function cr_update_8037() {
  // Reinstall the cr_feature_articles configuration.
  \Drupal::service('config.installer')
    ->installDefaultConfig('module', 'cr_feature_articles');
}

/**
 * Re-install the config from email_signup module
 */
function cr_update_8038() {
  \Drupal::service('config.installer')
    ->installDefaultConfig('module', 'cr_email_signup');
}

/**
 * Re-install the cr_article configuration to bring in changes to category requirement.
 */
function cr_update_8039() {
  // Reinstall the cr_article configuration.
  \Drupal::service('config.installer')
    ->installDefaultConfig('module', 'cr_article');
}

/**
 * Update all articles without an article type to be news.
 */
function cr_update_8040() {
  // Get an array of all 'article' node ids.
  $article_nids = \Drupal::entityQuery('node')
    ->condition('type', 'article')
    ->notExists('field_article_type')
    ->execute();

  // Load all the articles.
  $articles = \Drupal\node\Entity\Node::loadMultiple($article_nids);
  foreach ($articles as $article) {
    $article->set('field_article_type', 'news');
    $article->save();
  }
}

/**
 * Re-install the cr_article configuration to bring in changes to teaser articles display.
 */
function cr_update_8041() {
  // Reinstall the cr_article configuration.
  \Drupal::service('config.installer')
    ->installDefaultConfig('module', 'cr_article');
}

/**
 * Re-install the cr_iframe configuration to bring in the initial height field.
 */
function cr_update_8042() {
  // Reinstall the cr_article configuration.
  \Drupal::service('config.installer')
    ->installDefaultConfig('module', 'cr_iframe');
}

/**
 * Install override_node_options & view_unpublished to allow content editors to see unpublished articles.
 */
function cr_update_8043() {
  installer()->install(['view_unpublished']);
  installer()->install(['override_node_options']);
}

/**
 * Install advanced aggregator and advanced js minifier.
 */
function cr_update_8044() {
    installer()->install(['advagg']);
    installer()->install(['advagg_js_minify']);
}
