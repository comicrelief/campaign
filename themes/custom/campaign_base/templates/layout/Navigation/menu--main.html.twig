{% import _self as menus %}

{#
  We call a macro which calls itself to render the full tree.
  @see http://twig.sensiolabs.org/doc/tags/macro.html
#}
{{ menus.menu_links(items, attributes, 0) }}

{% macro menu_links(items, attributes, menu_level) %}
  {% import _self as menus %}
  {% if items %}
    {% if menu_level == 0 %}
      <ul{{ attributes.addClass('menu sm main-nav__items menu--level-0') }} id="main-menu" >
    {% else %}
      <ul class="menu main-nav__items menu--level-{{menu_level}}">
        {% if menu_level == 1 %}
          {# Duplicate menu link for UX, to be populated by JS #}
          <li class="menu-item menu-item--duplicate">
            <a href="/">
            </a>
          </li>
        {% endif %}
    {% endif %}
    {% for item in items %}

      {%
        set classes = [
          'menu-item',
          item.is_expanded ? 'menu-item--expanded',
          item.is_collapsed ? 'menu-item--collapsed',
          item.in_active_trail ? 'menu-item--active-trail',
        ]
      %}

      <li{{ item.attributes.addClass(classes) }}>
          
        {#  nb: confusingly, Drupal's expanded refers to having submenus, but aria-expanded is the current state of an associated submeu #}
        {% if item.is_expanded %}
        {{ link(item.title, item.url, {'aria-expanded':['false'],'aria-haspopup':['true']}) }}
        {% else %}
        {{ link(item.title, item.url) }}
        {% endif %}

        {% if item.below %}
          {{ menus.menu_links(item.below, attributes, menu_level + 1) }}
        {% endif %}

      </li>
    {% endfor %}
    </ul>
  {% endif %}
{% endmacro %}
